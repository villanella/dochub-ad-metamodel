functions:
  seaf_ddd_tree:
    title: Получение дерева DDD из идентификатора объекта
    params:
      - type: string
        title: Идентификатор объекта
        alias: obj_id
        required: true
    code: >
      (
          $obj_id:= obj_id;

          $getDDDWrappers:= function($obj_id){(
            $domains:= $split($obj_id, ".");
            $domains:= $count($domains) > 0
              ? $domains
              : [];
            $getPaths:= function($domains, $i, $paths){(
              $paths:= $i=0
                        ? $domains[0]
                        : $append($paths, $paths[$i-1] & "." & $domains[$i]);
              $i < $count($domains)-1 
                ? $getPaths($domains, $i+1, $paths)
                : $paths 
            )};
            $paths:= $getPaths($domains, 0, []);
            
            { 
              "domains": [$domains],  /*includes $obj_id tail*/
              "paths": [$paths]       /*includes $obj_id itself*/
            }
          )};

          $getDDDWrappers($obj_id);
      )
    result:
      type: object
      description: >
        domains -- массив идентификаторов доменов (d1, d2, ...), 
        paths -- массив "путей" (d1, d1.d2, ...) 

  seaf_ddd_top:
    title: Получение DDD верхнего уровня
    params:
      - type: object
        title: Объекты сущности
        alias: objects
    code: >
      (
        $objects:= objects.$spread();
        $tops:= $map($objects, function($v) {(
                  $paths:= $seaf_ddd_tree($v.$keys()).paths;

                  $getTop:= function($paths, $i){(
                    $paths[$i] in $objects.$keys()
                      ? $paths[$i]
                      : $getTop($paths, $i+1)
                  )};

                  $top:= $getTop($paths, 0);
                )});

        $distinct($tops)        
      )
    result:
      description: Верхние DDD домены

  seaf_has_parts:
    title: Из каких частей состоит объект
    params:
      - type: string
        title: Идентификатор объекта
        alias: obj_id
        required: true
      - type: object
        title: Глобальный Контекст -- $$ 
        alias: ctx
        required: true
    code: >
      (
          $ctx:= ctx;
          $obj_id:= obj_id;

            $getParts:= function($obj_id, $i, $parts_id){(
                            $parts:= $ctx.*.$spread()[$obj_id = $.*.is_part_of].$keys();
                            $count($parts) > 0
                              ? (
                                  $parts:= $map($parts, function($v){(
                                   {$string($obj_id): $v}
                                  )});
                                  $parts_id:=$append($parts_id, $parts);
                                  $deeper:= $map($parts, function($v) {(
                                    $getParts($v.*, $i+1, $parts_id)
                                  )});
                                  $parts_id:= $reduce($append($parts_id, $deeper), $append)
                                )
                              : $parts_id
                        )};
            $parts:= $getParts($obj_id, 0, []);
            $count($parts) > 0 
              ? [$distinct($parts)]
              : []
      )
    result:
      type: array
      description: >
        Перечень идентификаторов сверху вниз

  seaf_is_part:
    title: Часть чего является объект
    params:
      - type: string
        title: Идентификатор объекта
        alias: obj_id
        required: true
      - type: object
        title: Глобальный Контекст -- $$
        alias: ctx
        required: true
    code: >
      (
          $ctx:= ctx;
          $obj_id:= obj_id;

            $getWrappers:= function($obj_id, $wrappers_id){(
              $obj:= $ctx.*.$spread()[$.$keys() = $obj_id];
              $wrapper:= $obj.*.is_part_of;
              $res:= $wrapper
                ? ($wrappers_id:= $append($wrappers_id, $obj.*.is_part_of);
                  $getWrappers($wrapper, $wrappers_id))
                : $wrappers_id
            )};
            $wrappers:= $getWrappers($obj_id, [])^(<$length($));
            $count($wrappers) > 0 
              ?[$wrappers]
              : []
      )
    result:
      type: array
      description: >
        Перечень идентификаторов сверху вниз, не включая сам объект


      # # Is Hexagon imported check
      # #todo make it function
      # is_hexed:
      #   type: markdown
      #   template: templates/is_hexed.md
      #   source: >
      #     (
      #       {"hexed": $.imports[$contains($, "hexagon/dochub.yaml")].$count($) > 0};
      #     )
